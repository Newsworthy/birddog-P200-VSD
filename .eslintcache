[{"G:\\React\\birddog\\src\\index.js":"1","G:\\React\\birddog\\src\\reportWebVitals.js":"2","G:\\React\\birddog\\src\\App.js":"3","G:\\React\\birddog\\src\\components\\layout\\Footer.js":"4"},{"size":620,"mtime":1606992246638,"results":"5","hashOfConfig":"6"},{"size":362,"mtime":499162500000,"results":"7","hashOfConfig":"6"},{"size":16014,"mtime":1608122758075,"results":"8","hashOfConfig":"6"},{"size":769,"mtime":1608119642112,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},"ce68lw",{"filePath":"13","messages":"14","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},{"filePath":"15","messages":"16","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"17","usedDeprecatedRules":"12"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"G:\\React\\birddog\\src\\index.js",[],["20","21"],"G:\\React\\birddog\\src\\reportWebVitals.js",[],"G:\\React\\birddog\\src\\App.js",["22"],"import React, { Component } from 'react';\nimport axios from 'axios';\nimport { Container, Row, Col, Form, Button, Alert, Spinner } from 'react-bootstrap';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'react-bootstrap-range-slider/dist/react-bootstrap-range-slider.css';\nimport './App.css';\nimport Footer from './components/layout/Footer';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      av: {},\n      wb: {},\n      exp: {},\n      pic1: {},\n      pic2: {},\n      url: '',\n      port: '8080',\n      sectors: [\n        \"recall\", \"birddogavsetup\", \"birddogwbsetup\", \"birddogexpsetup\", \"birddogpic1setup\", \"birddogpic2setup\",\n      ],\n      connected: false,\n      loading: false,\n      error: '',\n      refreshSpeed: 1000,\n      region: '',\n      tempurl: '',\n      initialLoad: false,\n    }\n  }\n\n  loadAVData = async () => {\n    const sector = 'birddogavsetup';\n    this.setState({\n      loading: true,\n    });\n    try {\n      const result = await axios\n        .get(this.state.url + ':' + this.state.port + '/' + sector)\n      this.setState({\n        av: result.data,\n        loading: false,\n        error: false,\n        initialLoad: false,\n      });\n    } catch (error) {\n      console.error(\"error: \", error);\n      this.setState({\n        error: `${error}`,\n        loading: false,\n        initialLoad: false,\n        connected: false,\n      });\n    }\n  };\n\n  loadWBData = async () => {\n    const sector = 'birddogwbsetup';\n    this.setState({\n      loading: true,\n    });\n    try {\n      const result = await axios\n        .get(this.state.url + ':' + this.state.port + '/' + sector)\n      this.setState({\n        wb: result.data,\n        loading: false,\n        error: false,\n        initialLoad: false,\n        connected: true,\n      });\n    } catch (error) {\n      console.error(\"error: \", error);\n      this.setState({\n        error: `${error}`,\n        loading: false,\n        initialLoad: false,\n        connected: false,\n      });\n    }\n  };\n\n  loadEXPData = async () => {\n    const sector = 'birddogexpsetup';\n    this.setState({\n      loading: true,\n    });\n    try {\n      const result = await axios\n        .get(this.state.url + ':' + this.state.port + '/' + sector)\n      this.setState({\n        exp: result.data,\n        loading: false,\n        error: false,\n        initialLoad: false,\n        connected: true,\n      });\n    } catch (error) {\n      console.error(\"error: \", error);\n      this.setState({\n        error: `${error}`,\n        loading: false,\n        initialLoad: false,\n        connected: false,\n      });\n    }\n  };\n\n  loadPIC1Data = async () => {\n    const sector = 'birddogpic1setup';\n    this.setState({\n      loading: true,\n    });\n    try {\n      const result = await axios\n        .get(this.state.url + ':' + this.state.port + '/' + sector)\n      this.setState({\n        pic1: result.data,\n        loading: false,\n        error: false,\n        initialLoad: false,\n        connected: true,\n      });\n    } catch (error) {\n      console.error(\"error: \", error);\n      this.setState({\n        error: `${error}`,\n        loading: false,\n        initialLoad: false,\n        connected: false,\n      });\n    }\n  };\n\n  loadPIC2Data = async () => {\n    const sector = 'birddogpic2setup';\n    this.setState({\n      loading: true,\n    });\n    try {\n      const result = await axios\n        .get(this.state.url + ':' + this.state.port + '/' + sector)\n      this.setState({\n        pic2: result.data,\n        loading: false,\n        error: false,\n        initialLoad: false,\n        connected: true,\n      });\n\n    } catch (error) {\n      console.error(\"error: \", error);\n      this.setState({\n        error: `${error}`,\n        loading: false,\n        initialLoad: false,\n        connected: false,\n      });\n    }\n  };\n\n  regionSelector = () => {\n    const resolution = this.state.av.av_ndivideo;\n    const arr50 = [\"1080p50\", \"1080p25\", \"1080i50\", \"720p50\"]\n    if (arr50.includes(resolution)) {\n      this.setState({\n        region: \"50\",\n      })\n    } else {\n      this.setState({\n        region: \"60\",\n      })\n    }\n  }\n\n  componentDidMount() {\n    clearInterval(this.interval);\n    this.setState({\n      error: '',\n      connected: false,\n      loading: false,\n    })\n  }\n\n  shutterSpeedHandler = () => {\n    let region = this.state.region;\n    const palShutterSpeed = [\"1/1\", \"1/2\", \"1/3\", \"1/6\", \"1/12\", \"1/25\", \"1/50\", \"1/75\", \"1/100\", \"1/120\", \"1/150\", \"1/215\", \"1/300\", \"1/425\", \"1/600\", \"1/1000\", \"1/1250\", \"1/1750\", \"1/2500\", \"1/3500\", \"1/6000\", \"1/10000\"]\n    const ntscShutterSpeed = [\"1/1\", \"1/2\", \"1/4\", \"1/8\", \"1/15\", \"1/30\", \"1/60\", \"1/90\", \"1/100\", \"1/125\", \"1/180\", \"1/250\", \"1/350\", \"1/500\", \"1/725\", \"1/1000\", \"1/1500\", \"1/2000\", \"1/3000\", \"1/4000\", \"1/6000\", \"1/10000\"]\n    if (region === \"50\") {\n      return (\n        <Form>\n          <Form.Group controlId=\"shutterRangePAL\">\n            <Form.Label><h4 className=\"categorySubTitle\">Speed </h4><h5>{palShutterSpeed[this.state.exp.exp_camspeed]}</h5></Form.Label>\n            <Form.Control type=\"range\" min=\"0\" max=\"22\" value={this.state.exp.exp_camspeed} />\n          </Form.Group>\n        </Form>\n      )\n    } else {\n      return (\n        <Form>\n          <Form.Group controlId=\"shutterRangeNTSC\">\n            <Form.Label><h4 className=\"categorySubTitle\">Speed </h4><h5>{ntscShutterSpeed[this.state.exp.exp_camspeed]}</h5></Form.Label>\n            <Form.Control type=\"range\" min=\"0\" max=\"22\" value={this.state.exp.exp_camspeed} />\n          </Form.Group>\n        </Form>)\n    };\n  }\n\n  irisHandler = () => {\n    const irisArr = [\"Closed\", \"f/14\", \"f/11\", \"f/9.6\", \"f/8.0\", \"f/6.8\", \"f/5.6\", \"f/4.8\", \"f/4.0\", \"f/3.4\", \"f/2.8\", \"f/2.4\", \"f/2.0\", \"f/1.6\"];\n    return (\n      <Form>\n        <Form.Group controlId=\"apertureRange\">\n          <Form.Label><h4 className=\"categorySubTitle\">Iris </h4><h5>{irisArr[this.state.exp.exp_camiris - 4]}</h5></Form.Label>\n          <Form.Control type=\"range\" min=\"4\" max=\"17\" value={this.state.exp.exp_camiris} />\n        </Form.Group>\n      </Form>\n    )\n  }\n\n  gainHandler = () => {\n    const gainArr = [0, 3.6, 7.1, 10.7, 14.3, 17.8, 21.4, 25, 28.6, 32.1, 35.7, 39.3, 42.8, 46.4, 50]\n    return (\n      <Form>\n        <Form.Group controlId=\"gainRangeForm\">\n          <Form.Label><h4 className=\"categorySubTitle\">Gain</h4> <h5>{gainArr[this.state.exp.exp_camgain - 1]}dB</h5></Form.Label>\n          <Form.Control type=\"range\" min=\"1\" max=\"15\" value={this.state.exp.exp_camgain} />\n        </Form.Group>\n      </Form>\n    )\n  }\n\n  maxGainHandler = () => {\n    const maxGainArr = [10.7, 14.3, 17.8, 21.4, 25, 28.6, 32.1, 35.7, 39.3, 42.8, 46.4, 50]\n    const gainLimit = parseInt(this.state.exp.exp_camgainlimit);\n    return (\n      <Form>\n        <Form.Group controlId=\"gainLimitRangeForm\">\n          <Form.Label><h4 className=\"categorySubTitle\">Gain limit</h4><h5>{gainLimit < 4 ? <>Error</> : <>{maxGainArr[gainLimit - 4]}dB</>}</h5></Form.Label>\n          <Form.Control type=\"range\" min=\"4\" max=\"15\" value={gainLimit} />\n        </Form.Group>\n      </Form>\n    )\n  }\n\n  wbHandler = () => {\n    let wbList = {\n      \"AUTO\": \"Auto\",\n      \"INDOOR\": \"Indoor (Tungsten)\",\n      \"OUTDOOR\": \"Outdoor (Daylight)\",\n      \"ONEPUSH\": \"One Push WB\",\n      \"ATW\": \"Auto Trace WB\",\n      \"MANUAL\": \"Manual\",\n      \"OUTDOOR-AUTO\": \"Outdoor Auto\",\n      \"SLV-AUTO\": \"Sodium Vapour Lamp Auto\",\n      \"SLV\": \"Sodium Vapour Lamp Manual\",\n      \"SLV-OUTDOOR-AUTO\": \"Sodium Vapour Lamp Outdoor\",\n    }\n    return (\n      <Form>\n        <Form.Group controlId=\"Camera_White_Balance_Mode\">\n          <Form.Label><h4 className=\"categorySubTitle\">WB Mode</h4></Form.Label>\n          <Form.Control type=\"text\" defaultValue={wbList[this.state.wb.wb_camwb]} readOnly>\n          </Form.Control>\n          {this.state.wb.wb_camwb === \"MANUAL\" ? <><Row>Camera Red Gain - {this.state.wb.wb_camredgain}</Row><Row>Camera Blue Gain - {this.state.wb.wb_cambluegain}</Row></> : <></>}\n        </Form.Group>\n      </Form>\n    )\n  }\n\n  exposureModeHandler = () => {\n    // console.log(\"Mode: \" + this.state.exp.exp_camexpm)\n    let expModeList = {\n      \"FULL-AUTO\": \"Full Auto\",\n      \"MANUAL\": \"Manual\",\n      \"SHUTTER-PRI\": \"Shutter Priority\",\n      \"IRIS-PRI\": \"Iris Priority\",\n      \"BRIGHT\": \"Bright Mode\",\n    }\n    return (\n      <>\n        <Form>\n          <Form.Group as={Col} controlId=\"Camera_Exposure_Mode\">\n            <Form.Label><h6 className=\"categorySubTitle\">Exposure</h6></Form.Label>\n            <Form.Control type=\"text\" defaultValue={expModeList[this.state.exp.exp_camexpm]} readOnly>\n            </Form.Control>\n          </Form.Group>\n        </Form>\n      </>\n    )\n  }\n\n  highSensModeHandler = () => {\n    return (\n      <>\n        <Col xs=\"6\">\n          <h6 className=\"categorySubTitle\">High<br />Sensitivity</h6>\n        </Col>\n        <Col xs=\"6\">\n          {this.state.exp.exp_camhighsens === \"hson\" ? <Button size=\"sm\" variant=\"danger\">Enabled</Button> : <Button size=\"sm\" variant=\"success\">Disabled</Button>}\n        </Col>\n      </>\n    )\n  }\n\n  IRCutHandler = () => {\n    return (\n      <>\n        <Col xs=\"6\">\n          <h6 className=\"categorySubTitle\">Infra-Red</h6>\n        </Col>\n        <Col xs=\"6\">\n          {this.state.pic2.pic2_camircutfil === \"circfon\" ? <Button size=\"sm\" variant=\"danger\">Enabled</Button> : <Button size=\"sm\" variant=\"success\">Disabled</Button>}\n        </Col>\n      </>\n    )\n  }\n\n  bAndWHandler = () => {\n    return (\n      <>\n        <Col xs=\"6\">\n          <h6 className=\"categorySubTitle\">Black & White</h6>\n        </Col>\n        <Col xs=\"6\">\n          {this.state.pic1.pic1_cameffect === \"efbnw\" ? <Button size=\"sm\" variant=\"danger\">Enabled</Button> : <Button size=\"sm\" variant=\"success\">Disabled</Button>}\n        </Col>\n      </>\n    )\n  }\n\n  mirrorHandler = () => {\n    return (\n      <>\n        <Col>\n          <h6 className=\"categorySubTitle\">Mirror</h6>\n        </Col>\n        <Col xs=\"6\">\n          {this.state.pic1.pic1_cammirror === \"cmon\" ? <Button size=\"sm\" variant=\"danger\">Enabled</Button> : <Button size=\"sm\" variant=\"success\">Disabled</Button>}\n        </Col>\n      </>\n    )\n  }\n\n  flipHandler = () => {\n    return (\n      <>\n        <Col>\n          <h6 className=\"categorySubTitle\">Flip</h6>\n        </Col>\n        <Col xs=\"6\">\n          {this.state.pic1.pic1_camflip === \"cfon\" ? <Button size=\"sm\" variant=\"danger\">Enabled</Button> : <Button size=\"sm\" variant=\"success\">Disabled</Button>}\n        </Col>\n      </>\n    )\n  }\n\n  IPChangeHandler = (event) => {\n    const tempurl = this.state.url;\n    this.setState({\n      tempurl: event.target.value,\n    });\n  }\n\n  connectP200 = (event) => {\n    console.log(\"Connecting!\");\n    if (this.interval) {\n      // console.log(\"Interval found! Clearing!\")\n      clearInterval(this.interval);\n    }\n    event.preventDefault();\n    this.setState({\n      error: '',\n      initialLoad: true,\n    })\n    this.interval = setInterval(() => {\n      this.loadAVData();\n      this.loadWBData();\n      this.loadEXPData();\n      this.loadPIC1Data();\n      this.loadPIC2Data();\n      this.regionSelector();\n      this.connectionChecker();\n    }, this.state.refreshSpeed);\n  }\n\n  connectionChecker = () => {\n    if (this.state.error) {\n      console.log(\"Error: \" + this.state.error);\n      clearInterval(this.interval);\n      this.setState({\n        connected: false,\n      })\n    } else {\n      this.setState({\n        connected: true,\n      })\n    }\n  }\n\n  handleChange(event) {\n    const { name, value } = event.target;\n    this.setState({ [name]: value });\n  }\n\n  disconnect(event) {\n    event.preventDefault();\n    clearInterval(this.interval);\n    setTimeout(\n      () => this.setState({\n        error: \"Disconnected\",\n        connected: false,\n      }),\n      500\n    );\n    console.log(\"Disconnecting\");\n  };\n\n\n  render() {\n    const url = this.state.url;\n    return (\n      <div>\n        <Container>\n          <Row style={{ height: \"150px\" }} className=\"App-header d-flex align-items-center\">\n            <Col xs={4}>\n              BirdDog P200<br />Vital Settings Display\n            </Col>\n            <Col xs={4}>\n              <Form onSubmit={this.connectP200.bind(this)}>\n                <Form.Group as={Row}>\n                  <Col xs={2}>\n                    <Form.Label>IP:</Form.Label>\n                  </Col>\n                  <Col xs={6}>\n                    <Form.Control\n                      required\n                      type=\"url\"\n                      name=\"url\"\n                      id=\"url\"\n                      value={url}\n                      onChange={this.handleChange.bind(this)}\n                      placeholder=\"Enter URL\"\n                      disabled={this.state.connected === true ? true : false}\n                    />\n\n                  </Col>\n                  <Col>\n                    {this.state.connected === false ? <Button variant=\"success\" type=\"submit\" size=\"sm\">Connect</Button> : <Button variant=\"danger\" size=\"sm\" onClick={this.disconnect.bind(this)} >Disconnect</Button>}\n                  </Col>\n                </Form.Group>\n              </Form>\n            </Col>\n            <Col xs={4}>\n              {this.state.initialLoad === true ? <><Alert variant=\"info\"><Spinner animation=\"border\" variant=\"info\"></Spinner> Loading</Alert></> : <>{this.state.connected === false ? <><Alert variant=\"danger\"><Spinner animation=\"grow\" variant=\"danger\" size=\"sm\"></Spinner><h6 style={{ color: \"red\" }}>No Connection<br />{this.state.error ? <span>{this.state.error}</span> : <span></span>}</h6></Alert></> : <h6>Camera Detected<br /><Spinner animation=\"grow\" variant=\"success\" size=\"sm\" /> Connected to {this.state.url}</h6>}</>\n              }\n\n            </Col>\n          </Row>\n          <Row className=\"mainRow\">\n            <h3>Main Settings</h3>\n          </Row>\n\n          <Row className=\"cameraCategory\">\n            <Col>\n              <h4>Resolution: {this.state.av.av_ndivideo}</h4>\n            </Col>\n            <Col>\n              <h4>NDI Quality: {this.state.av.av_videoq3g}Mbps</h4>\n            </Col>\n          </Row>\n          <hr />\n          <Row className=\"\">\n            <Col className=\"cameraCategory\">\n              <Row>\n                {this.wbHandler()}\n              </Row>\n              <Row>\n                {/* Colour temp - {this.state.wb.wb_camcolortemp} - Unknown */}\n              </Row>\n            </Col>\n            <Col className=\"cameraCategory\">\n              <Row>\n                {this.shutterSpeedHandler()}\n              </Row>\n            </Col>\n            <Col className=\"cameraCategory\">\n              <Row>\n                {this.irisHandler()}\n              </Row>\n            </Col>\n            <Col className=\"cameraCategory\">\n              <Row>\n                {this.gainHandler()}\n              </Row>\n            </Col>\n            <Col className=\"cameraCategory\">\n              <Row>\n                {this.maxGainHandler()}\n              </Row>\n            </Col>\n          </Row>\n          <hr />\n          <Row>\n            <Col xs=\"2\" className=\"settingWindow\">\n              <Row>\n                {this.exposureModeHandler()}\n              </Row>\n            </Col>\n            <Col xs=\"2\" className=\"settingWindow\">\n              <Row>\n                {this.highSensModeHandler()}\n              </Row>\n            </Col>\n            <Col xs=\"2\" className=\"settingWindow\">\n              <Row>\n                {this.IRCutHandler()}\n              </Row>\n            </Col>\n            <Col xs=\"2\" className=\"settingWindow\">\n              <Row>\n                {this.bAndWHandler()}\n              </Row>\n            </Col>\n            <Col xs=\"2\" className=\"settingWindow\">\n              <Row>\n                {this.mirrorHandler()}\n              </Row>\n            </Col>\n            <Col xs=\"2\" className=\"settingWindow\">\n              <Row>\n                {this.flipHandler()}\n              </Row>\n            </Col>\n          </Row>\n        </Container>\n        <Footer />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","G:\\React\\birddog\\src\\components\\layout\\Footer.js",[],{"ruleId":"23","replacedBy":"24"},{"ruleId":"25","replacedBy":"26"},{"ruleId":"27","severity":1,"message":"28","line":360,"column":11,"nodeType":"29","messageId":"30","endLine":360,"endColumn":18},"no-native-reassign",["31"],"no-negated-in-lhs",["32"],"no-unused-vars","'tempurl' is assigned a value but never used.","Identifier","unusedVar","no-global-assign","no-unsafe-negation"]